#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

#define F_CPU 16000000UL // 16 MHz
#define BAUD 57600
#define MY_UBRR F_CPU/16/BAUD-1

void USART_Init(unsigned int ubrr) {
    // Set baud rate
    UBRR0H = (unsigned char)(ubrr>>8);
    UBRR0L = (unsigned char)ubrr;
    // Enable receiver and transmitter
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    // Set frame format: 8data, 2stop bit
    UCSR0C = (1<<USBS0)|(3<<UCSZ00);
}

void USART_Transmit(unsigned char data) {
    // Wait for empty transmit buffer
    while (!(UCSR0A & (1<<UDRE0)));
    // Put data into buffer, sends the data
    UDR0 = data;
}

void USART_SendString(char* string) {
    while (*string) {
        USART_Transmit(*string++);
    }
}

void ADC_Init() {
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
}

uint16_t ADC_Read(uint8_t ch) {
    // Select ADC Channel ch must be 0-7
    ADMUX = (ADMUX & 0xF8)|ch;
    // Start single conversion
    ADCSRA |= (1<<ADSC);
    // Wait for conversion to complete
    while(ADCSRA & (1<<ADSC));
    return (ADC);
}

void Tone(uint16_t frequency, uint16_t duration) {
    // This function generates a simple square wave
    // It's not using timers and might not be precise
    long delayValue = 1000000 / frequency / 2; // Calculate the delay value between transitions
    long numCycles = frequency * duration / 1000; // Calculate the number of cycles for proper duration
    for (long i = 0; i < numCycles; i++) { // Toggle pin for each cycle
        // Your code to toggle a pin
        _delay_us(delayValue);
        // Toggle the pin again
        _delay_us(delayValue);
    }
}

int main(void) {
    USART_Init(MY_UBRR);
    ADC_Init();

    DDRB |= (1<<1); // Set pin 9 (PB1) as output

    while(1) {
        // Example usage
        USART_SendString("Hello World!\r\n");
        _delay_ms(1000);

        uint16_t adcValue = ADC_Read(2); // Read from ADC channel 2
        // Convert adcValue to string and send via USART
        // Implement conversion or use itoa if available

        // Play tone
        // Tone(frequency, duration); // Specify frequency and duration
        // Note: You need to implement pin toggling in Tone function
    }
}
